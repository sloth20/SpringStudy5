<?xml version="1.0" encoding="UTF-8"?>  
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

	<context:component-scan base-package="com.sp"/>

	<http auto-config="true" use-expressions="true">
	        <csrf disabled="true"/>
	        
    		<!-- 스마트에디터 -->
			<headers>
            	<frame-options policy="SAMEORIGIN" />
            	<hsts disabled="true"/>
        	</headers>    	
        	        
            <!-- 모든 접근자를 항상 승인 -->
            <intercept-url pattern="/index.jsp" access="permitAll" />
            <intercept-url pattern="/main" access="permitAll" />
            <intercept-url pattern="/member/login" access="permitAll" />
            <intercept-url pattern="/member/member" access="permitAll" />
			<intercept-url pattern="/member/userIdCheck" access="permitAll" />
			<intercept-url pattern="/member/complete" access="permitAll" />

            <!-- 이미지, javascript, css등 -->
			<intercept-url pattern="/resource/**" access="permitAll" />
	        
	         <!-- admin 페이지 -->
		    <intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />

	         <!-- 모든 페이지 -->
	        <intercept-url pattern="/**" access="hasRole('ROLE_USER')" />

	        <!--  사용자 정의 로그인 폼  -->
	        <form-login login-page="/member/login"
	             login-processing-url="/member/login"
	             username-parameter="userId"
	             password-parameter="userPwd"
	             default-target-url="/"
	             always-use-default-target="false"
	             authentication-success-handler-ref="loginSuccessHandler"
	             authentication-failure-handler-ref="loginFailureHandler"/>
	        
	        <logout logout-url="/member/logout"
	                     invalidate-session="true"
	                     logout-success-url="/"/>
	        
	        <!-- 접근 권한이 없는 경우 -->
	        <access-denied-handler error-page="/member/noAuthorized"/>
	        
	        <!-- AJAX 로그인 검사를 위한 필터 등록 -->
			<!-- EXCEPTION_TRANSLATION_FILTER : 이 필터는 보호된 요청을 처리하는 동안 발생할 수 있는 기대한 예외의 기본 라우팅과 위임을 처리함 -->
    		<custom-filter ref="ajaxSessionTimeoutFilter"
    	              after="EXCEPTION_TRANSLATION_FILTER"/>
    	              
	         <!-- 동일 아이디로 동시에 1명만 접속(기존 세션 만료) -->
			<session-management>
				<concurrency-control max-sessions="1" expired-url="/member/expired"/>
			</session-management>	        
	</http>

	<beans:bean id="loginSuccessHandler" class="com.sp.security.LoginSuccessHandler">
		<beans:property name="defaultUrl" value="/"/>
    </beans:bean>
               
    <beans:bean id="loginFailureHandler" class="com.sp.security.LoginFailureHandler">
    	<beans:property name="defaultFailureUrl" value="/member/login?login_error"/>
    </beans:bean>
               
     <jdbc-user-service 
         data-source-ref="dataSource"
         id="userService"
         users-by-username-query="SELECT userId AS username, userPwd AS password, enabled FROM member1 WHERE userId=?"
         authorities-by-username-query="SELECT userId AS username, authority AS authority FROM memberAuthority WHERE userId=?"/>
    
    <!--  bcrypt : 패스워드 암호화에 특화된 password hashing function -->
	<authentication-manager>
		<authentication-provider user-service-ref="userService">
		      <password-encoder ref="bcryptEncoder"/>
		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!-- AJAX 작업에서 예외가 발생한 경우 실행할 필터 -->
	<beans:bean id="ajaxSessionTimeoutFilter" class="com.sp.security.AjaxSessionTimeoutFilter">
		<beans:property name="ajaxHeader" value="AJAX" />
	</beans:bean>

</beans:beans>
