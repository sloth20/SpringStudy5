<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
	<select id="loginMember" parameterType="String"
		resultType="com.sp.member.Member">
		SELECT memberIdx, userId, userName, userPwd, created_date,
		modify_date, last_login
		FROM member1
		WHERE userId = #{userId} AND
		enabled != 0
	</select>

	<update id="updateLastLogin" parameterType="String">
		UPDATE member1 SET
		last_login = SYSDATE
		WHERE userId=#{userId}
	</update>

	<select id="memberSeq" resultType="Long">
		SELECT member_seq.NEXTVAL FROM dual
	</select>

	<insert id="insertMember" parameterType="Long">
		INSERT INTO member(memberIdx) VALUES (#{memberIdx})
	</insert>

	<insert id="insertMember1" parameterType="com.sp.member.Member">
		INSERT INTO member1(memberIdx, userId, userName, userPwd) VALUES
		(#{memberIdx}, #{userId}, #{userName}, #{userPwd})
	</insert>

	<insert id="insertMember2" parameterType="com.sp.member.Member">
		INSERT INTO member2
		(userId, birth, email, tel, zip, addr1, addr2) VALUES
		(#{userId}, #{birth}, #{email}, #{tel},
		#{zip, jdbcType=VARCHAR}, #{addr1, jdbcType=VARCHAR},
		#{addr2, jdbcType=VARCHAR})
	</insert>

	<update id="insertMember12" parameterType="com.sp.member.Member">
		INSERT ALL
		INTO member1(memberIdx, userId, userName, userPwd) VALUES (#{memberIdx},
		#{userId}, #{userName}, #{userPwd})
		INTO member2(userId, birth, email, tel, zip, addr1, addr2) VALUES
		(#{userId}, #{birth}, #{email}, #{tel},
		#{zip, jdbcType=VARCHAR}, #{addr1, jdbcType=VARCHAR},
		#{addr2, jdbcType=VARCHAR})
		SELECT * FROM dual
	</update>

	<select id="readMember" parameterType="String"
		resultType="com.sp.member.Member">
		SELECT memberIdx, m1.userId, userName, userPwd, enabled,
		created_date, modify_date, last_login
		,TO_CHAR(birth, 'YYYY-MM-DD') birth, email, tel, zip, addr1, addr2
		FROM member1 m1
		LEFT OUTER JOIN member2 m2 ON m1.userId = m2.userId
		WHERE m1.userId =
		#{userId}
	</select>

	<select id="readMember2" parameterType="String"
		resultType="com.sp.member.Member">
		SELECT m.memberIdx, membership, NVL(m1.userId, 'guest')
		userId, NVL(userName, '손님') userName, userPwd, enabled, created_date,
		modify_date, last_login
		,TO_CHAR(birth, 'YYYY-MM-DD') birth, email, tel, zip, addr1, addr2
		FROM member m
		LEFT
		OUTER JOIN member1 m1 ON m.memberIdx = m1.memberIdx
		LEFT OUTER JOIN
		member2 m2 ON m1.userId = m2.userId
		WHERE m.memberIdx = #{memberIdx}
	</select>

	<!-- 회원정보 수정 -->
	<update id="updateMembership" parameterType="map">
		UPDATE member SET membership = #{membership}
		WHERE memberIdx=#{memberIdx}
	</update>

	<update id="updateMemberEnabled" parameterType="map">
		UPDATE member1 SET enabled=#{enabled} WHERE userId=#{userId}
	</update>

	<update id="updateMember1" parameterType="com.sp.member.Member">
		UPDATE member1 SET userPwd=#{userPwd}, modify_date=SYSDATE
		WHERE userId=#{userId}
	</update>

	<update id="updateMember2" parameterType="com.sp.member.Member">
		UPDATE member2 SET email=#{email, jdbcType=VARCHAR},
		tel=#{tel, jdbcType=VARCHAR}, birth=#{birth, jdbcType=VARCHAR},
		zip=#{zip, jdbcType=VARCHAR},
		addr1=#{addr1, jdbcType=VARCHAR}, addr2=#{addr2, jdbcType=VARCHAR}
		WHERE userId=#{userId}
	</update>

	<!-- 회원 리스트 -->
	<sql id="where-list">
		<choose>
			<when test="condition=='userId'">
				INSTR(m1.userId, #{keyword}) &gt;= 1
			</when>
			<otherwise>
				INSTR(${condition}, #{keyword}) &gt;= 1
			</otherwise>
		</choose>
	</sql>

	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT COUNT(*)
		FROM member1 m1
		LEFT OUTER JOIN member2 m2 ON m1.userId
		= m2.userId
		<where>
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-list" />
			</if>
			<if test="enabled!=''">
				AND enabled = #{enabled}
			</if>
			AND m1.userId != 'admin'
		</where>
	</select>

	<select id="listMember" parameterType="map"
		resultType="com.sp.member.Member">
		SELECT m1.memberIdx, m1.userId, userName,
		m1.created_date, m1.modify_date, last_login,
		enabled, email, tel,
		TO_CHAR(birth, 'YYYY-MM-DD') birth
		FROM member1 m1
		LEFT OUTER JOIN member2 m2 ON
		m1.userId = m2.userId
		<where>
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-list" />
			</if>
			<if test="enabled!=''">
				AND enabled = #{enabled}
			</if>
			AND m1.userId != 'admin'
		</where>
		ORDER BY created_date DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows}
		ROWS ONLY
	</select>
	<!-- 패스워드 실패 / 회원 상태 -->
	<select id="checkFailureCount" parameterType="String"
		resultType="Integer">
		SELECT NVL(faiure_cnt, 0) faiure_cnt
		FROM member1
		WHERE
		userId = #{userId}
	</select>

	<update id="updateFailureCountReset" parameterType="String">
		UPDATE
		member1 SET faiure_cnt = 0
		WHERE userId = #{userId}
	</update>

	<update id="updateFailureCount" parameterType="String">
		UPDATE member1 SET
		faiure_cnt = faiure_cnt + 1
		WHERE userId = #{userId}
	</update>

	<insert id="insertMemberState"
		parameterType="com.sp.member.Member">
		INSERT INTO memberState(num, userId, stateCode, memo)
		VALUES (memberState_seq.NEXTVAL, #{userId}, #{stateCode}, #{memo})
	</insert>

	<select id="listMemberState" parameterType="String"
		resultType="com.sp.member.Member">
		SELECT num, userId, stateCode, memo, registration_date
		FROM
		memberState
		WHERE userId = #{userId}
		ORDER BY num DESC
	</select>

	<select id="readMemberState" parameterType="String"
		resultType="com.sp.member.Member">
		SELECT num, userId, stateCode, memo, registration_date
		FROM
		memberState
		WHERE userId = #{userId}
		ORDER BY num DESC
		FETCH FIRST 1 ROWS
		ONLY
	</select>

	<!-- member 테이블 정보 삭제 -->
	<delete id="deleteMember1" parameterType="String">
		DELETE FROM member1 WHERE userId=#{userId}
	</delete>

	<delete id="deleteMember2" parameterType="String">
		DELETE FROM member2 WHERE userId=#{userId}
	</delete>

	<!-- 어쏘러티(권한) 테이블 -->
	<insert id="insertAuthority"
		parameterType="com.sp.member.Member">
		INSERT INTO memberAuthority(userId, authority)
		VALUES (#{userId}, #{authority})
	</insert>

	<select id="listAuthority" parameterType="String"
		resultType="com.sp.member.Member">
		SELECT userId, authority
		FROM memberAuthority
		WHERE
		userId=#{userId}
	</select>

	<update id="updateAuthority" parameterType="map">
		UPDATE
		memberAuthority SET authority=#{authority}
		WHERE userId=#{userId} AND
		authority=#{oldAuthority}
	</update>

</mapper>